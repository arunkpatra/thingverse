# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!
# !!!!! This is used in tests only, and only the gRPC client needs this config. !!!
# !!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Pass this environment variable to choose consul discovery to locate the backend gRPC service
# -Dakka.grpc.client.thingverse-service-client.service-discovery.mechanism=akka-consul
akka.loglevel = INFO

akka.remote.artery.canonical.hostname = 127.0.0.1

datastax-java-driver {
  basic {
    request {
      timeout = 5 seconds
    }
  }
}
akka.grpc.client {
  thingverse-service-client {
    service-discovery {
      mechanism = "config"
      service-name = "thingverse-backend"
      # optional for discovery
      protocol = "tcp"
      port-name = "http"
    }
    port = 8080
    use-tls = false
    grpc-load-balancing = "round_robin"
  }

}

# The config-discovery specifics
akka.discovery.config.services {
  thingverse-backend {
    endpoints = [
      {
        host = "127.0.0.1"
        port = 8080
      }
    ]
  }
}

akka {
  discovery {
    method = akka-consul
    akka-consul {
      consul-host = "127.0.0.1"
      consul-port = 8599
      # Prefix for consul tag with the name of the actor system / application name,
      # services with this tag present will be found by the discovery mechanism
      # i.e. `system:test` will be found in cluster if the cluster system is named `test`
      application-name-tag-prefix = "system:"

      # Prefix for tag containing port number where akka management is set up so that
      # the seed nodes can be found, an example value for the tag would be `akka-management-port:19999`
      application-akka-management-port-tag-prefix = "grpc-service-port:"
    }
  }
}