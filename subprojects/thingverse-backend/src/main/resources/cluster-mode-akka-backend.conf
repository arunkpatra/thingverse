//include "application"

//akka.cluster.seed-nodes = []

akka {
  discovery {
    method = akka-consul
    akka-consul {
      consul-host = "127.0.0.1"
      consul-port = 8500
      # Prefix for consul tag with the name of the actor system / application name,
      # services with this tag present will be found by the discovery mechanism
      # i.e. `system:test` will be found in cluster if the cluster system is named `test`
      application-name-tag-prefix = "system:"

      # Prefix for tag containing port number where akka management is set up so that
      # the seed nodes can be found, an example value for the tag would be `akka-management-port:19999`
      application-akka-management-port-tag-prefix = "akka-management-port:"
    }
    # Must See : https://doc.akka.io/docs/akka-management/current/discovery/kubernetes.html
    # You must have matching deploymnets in Kubernetes for this discovery method to work.
    # To activate this, you should pass akka.discovery.method=kubernetes-api either via system property or Config while
    # creating the actor system. In thingverse, we detect the execution environmnet and teak the Config.
    kubernetes-api {
      # Namespace to query for pods.
      #
      # Set this value to a specific string to override discovering the namespace using pod-namespace-path.
      pod-namespace = "thingverse"

      # Selector value to query pod API with.
      # `%s` will be replaced with the configured effective name, which defaults to the actor system name
      # pod-label-selector = "app=%s"
      pod-label-selector = "app=thingverse-backend"
    }
  }

  management {
    cluster {
      bootstrap {
        new-cluster-enabled = on
        contact-point-discovery {
          service-name = "thingverse-backend"
          protocol = "tcp"
          #port-name = "http" - This needs to be checked if it works with Consul or not.
          port-name = "management"
          #discovery-method = akka.discovery
          required-contact-point-nr = 2
          protocol = ""
          interval = 3 seconds
        }
      }
    }
  }

  http {
    server {
      default-host-header = "127.0.0.1"
    }
  }

  cluster {
    seed-nodes = []
  }
}